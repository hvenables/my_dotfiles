#------------------------------------------------------------------------------

# ActiveRecord has_many

snippet hm "has_many (hm)"
has_many :${1:object}${2:, class_name: '${3:class_name}', foreign_key: '${4:reference}'}
endsnippet

snippet clam "Active Record Model" b
class ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ApplicationRecord
	$0
end
endsnippet

snippet clap "Policy Model" b
class ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ApplicationPolicy
	$0
end
endsnippet

# GraphQL

snippet mut "Mutation"

endsnippet

#------------------------------------------------------------------------------
# Scopes

snippet scope "scope"
scope :${1:name}, -> ${2:(${3:param})} { $0 }
endsnippet

snippet scopel "scope lambda"
scope :${1:name}, lambda { ${2:|${3:param}|}
	$0
}
endsnippet

#------------------------------------------------------------------------------
# Rails validation

snippet v
validates :${1:field}$0
endsnippet

snippet "^(\s*validates.*)\bp" "presence validator" r
`!p snip.rv = match.group(1).rstrip()` presence: true
endsnippet

snippet "^(\s*validates.*)\bu" "uniqueness validator" r
`!p snip.rv = match.group(1).rstrip()` uniqueness: true
endsnippet

snippet "^(\s*validates.*)\bi" "inclusion validator" r
`!p snip.rv = match.group(1).rstrip()` inclusion: { in: ${1:collection_or_lambda} }
endsnippet

snippet "^(\s*validates.*uniqueness:\s*{[^}]*)\bc" "uniqueness case sensitivity" r
`!p snip.rv = match.group(1).rstrip()` case_sensitive: ${1:false}
endsnippet

snippet "^(\s*validates.*uniqueness:\s*{[^}]*)\bs" "uniqueness scope" r
`!p snip.rv = match.group(1).rstrip()` scope: :${1:field}
endsnippet

snippet "^(\s*validates.*)\bm" "validation message" r
`!p snip.rv = match.group(1).rstrip()` message: "${1:can't be screwed}"
endsnippet

snippet "^(\s*validates.*)\bo" "on create/update" r
`!p snip.rv = match.group(1).rstrip()` on: :${1:create}
endsnippet

snippet "^(\s*validates.*)\bab" "allow blank" r
`!p snip.rv = match.group(1).rstrip()` allow_blank: true
endsnippet

#------------------------------------------------------------------------------
# Rspec

snippet rspec "snippet template" b
require 'rails_helper'

RSpec.describe ${2}${1:`!v substitute(substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g'), 'Spec', '', 'g')`} do
	describe '${3:something}' do
		$0
	end
end
endsnippet

snippet bef
before do
	${0}
end
endsnippet

snippet befa
before :all do
	${0}
end
endsnippet
